#!/usr/bin/env jruby

# Copyright 2012 Lance Ball
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'thor'
require 'fileutils'
require 'torquebox-rake-support'
require 'torquebox/console/client'

class TorqueBoxConsoleCommand < Thor

  DEPLOYMENT_NAME = 'torquebox-console-knob.yml'

  desc "deploy --dir=DIR", <<-EOT
Writes the torquebox-console application to disk in the directory specified by 
--dir, and deploys the app to the TorqueBox instance detected on the local host,
(currently #{TorqueBox::DeployUtils.torquebox_home}).

If --dir is not provided, the torquebox-console app will be written to Dir.pwd/torquebox-console
(currently #{Dir.pwd}/torquebox-console). 
EOT
  method_option :dir, :type => :string, :default => "#{Dir.pwd}/torquebox-console"
  def deploy
    check
    deploy_dir = File.expand_path options[:dir]
    descriptor = TorqueBox::DeployUtils.basic_deployment_descriptor( :root => deploy_dir,
                                                                     :env => 'production' )
    Dir.mkdir( deploy_dir ) unless File.exist?( deploy_dir )
    puts "Copying torquebox-console app to #{deploy_dir}"
    files = Dir.glob("#{root_dir}/*") - ["#{root_dir}/bin"]
    FileUtils.cp_r( files, "#{deploy_dir}/" )
    name, dir = TorqueBox::DeployUtils.deploy_yaml( descriptor, :name => DEPLOYMENT_NAME )
    puts ">> Deployed to #{dir}/#{name}"
  end

  desc "undeploy", "Undeploys TorqueBox::Console from the TorqueBox instance specified by $TORQUEBOX_HOME"
  def undeploy
    check
    name, dir = TorqueBox::DeployUtils.undeploy_yaml( :name => DEPLOYMENT_NAME )
  end

  desc "connect", "Runs the CLI console"
  method_option :hostname, :type => :string, :default => "localhost"
  method_option :port, :type => :numeric, :default => 8675
  def connect
    TorqueBox::Console::Client.connect({ :host => options[:hostname], :port => options[:port] })
  end

  protected
  def check
    if !TorqueBox::DeployUtils.torquebox_home
      raise Exception.new("Can't find a local TorqueBox instance. Try setting TORQUEBOX_HOME.")
    end
  end

  def root_dir
    File.expand_path( File.join( File.dirname( __FILE__ ), '..' ) )
  end
end

TorqueBoxConsoleCommand.start(ARGV)
