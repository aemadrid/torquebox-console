#!/usr/bin/env jruby

# Copyright 2012 Lance Ball
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require File.join(File.dirname(__FILE__), '..', 'dependencies')

require 'thor'
require 'fileutils'
require 'torquebox-rake-support'
require 'torquebox/console/client'

class TorqueBoxConsoleCommand < Thor

  DEPLOYMENT_NAME = 'torquebox-console-knob.yml'
  default_task :connect

  desc "deploy", "Deploys the torquebox-console application to #{TorqueBox::DeployUtils.torquebox_home}."
  def deploy
    check
    deploy_app
  end

  desc "undeploy", "Undeploys torquebox-console from #{TorqueBox::DeployUtils.torquebox_home}."
  def undeploy
    check
    name, dir = TorqueBox::DeployUtils.undeploy_yaml( :name => DEPLOYMENT_NAME )
  end

  desc "connect", "Runs the torquebox-console CLI. If torquebox-console is not already deployed, it will be."
  method_option :hostname, :type => :string, :default => "localhost"
  method_option :port, :type => :numeric, :default => 8675
  def connect
    check
    deploy_app(true)
    TorqueBox::Console::Client.connect({ :host => options[:hostname], :port => options[:port] })
  end

  protected
  def deploy_app( wait = false )
    if (!TorqueBox::DeployUtils.is_deployed?(TorqueBox::DeployUtils.deployment_name('torquebox-console')))
      puts "Deploying torquebox-console to #{TorqueBox::DeployUtils.torquebox_home}"
      descriptor = TorqueBox::DeployUtils.basic_deployment_descriptor( :root => root_dir,
                                                                       :env => 'production' )
      name, dir = TorqueBox::DeployUtils.deploy_yaml( descriptor, :name => DEPLOYMENT_NAME )
      puts "Deployed torquebox-console to #{dir}/#{name}"
      if (wait)
        print "Giving TorqueBox a few seconds to initialize the console. Please be patient."
        counter = 5
        while counter > 0
          sleep 2
          print "."
          counter = counter - 1
        end
        puts ""
      end
    end
  end

  def check
    if !TorqueBox::DeployUtils.torquebox_home
      raise Exception.new("Can't find a local TorqueBox instance. Try setting TORQUEBOX_HOME.")
    end
    ENV['JBOSS_HOME'] = File.join(TorqueBox::DeployUtils.torquebox_home, 'jboss') unless ENV['JBOSS_HOME']
  end

  def root_dir
    File.expand_path( File.join( File.dirname( __FILE__ ), '..' ) )
  end
end

TorqueBoxConsoleCommand.start(ARGV)
